OmSriGaneshayaNamah
OmSriSaraswatyaiNamah
OmSriSaiRam


Numpy indexing and selection
============================

import numpy as np

arr = randint(1,50,10)
arr
output:
array([44, 44, 47, 34, 48,  7, 35,  8, 15, 25])

arr[8]
15

arr[1:5]
array([44, 47, 34, 48])

arr[:6]
array([44, 44, 47, 34, 48,  7]) 
#up until six elements from 0 being 1st element as 44 in the above array

arr[7:]
array([ 8, 15, 25]) 
#note here we are not grabbing 7th element but elements beyond 7th element


#broadcasting
-------------
arr[:5]=100
arr
output:
array([100, 100, 100, 100, 100,   7,  35,   8,  15,  25])


#slicing
--------

#slicing
sli_arr = arr[:6]
sli_arr
output:
array([100, 100, 100, 100, 100,   7])

sli_arr[:]=99
sli_arr
output:
array([99, 99, 99, 99, 99, 99])


IMPORTANT NOTE:
The command --- sli_arr[:]=99 --- not only assigns to sli_arr but it also by default assigns the original array that is 'arr' in this case, if we print arr

arr
output:
array([99, 99, 99, 99, 99, 99, 35,  8, 15, 25])

It is because the array was not copied, but it's just view of the original array.

If we want to copy and not a reference of the original array, what we can do is copy command to specifically indicat to copy the array

#copy array
arr_copy = arr.copy()

arr_copy
output:
array([99, 99, 99, 99, 99, 99, 35,  8, 15, 25])

if we modify any element in the copied array it effects only to the copied array and the original array will not be effected



2d array or matrix
------------------
one method to define 2d array:
mymat = [[1,2,3],[4,5,6],[7,8,9]]
np.array(mymat)
mymat
output:
array([[1, 2, 3],
       [4, 5, 6],
       [7, 8, 9]])

other method:
arr_2d = np.array([[1,3,4],[11,33,44],[111,333,444]])
arr_2d
output:
array([[  1,   3,   4],
       [ 11,  33,  44],
       [111, 333, 444]])

grabbing elements from 2d array or matrix there are two formats
1. single bracket format
2. double bracket format


#double bracket format
arr_2d[0][0]
output:
1

#single bracket format
arr_2d[0,0]
output:
1

#slicing to grab subsections of an array
arr_2d[:2,1:]
output:
array([[ 3,  4],
       [33, 44]])

arr_2d[:,1:]
output:
array([[  3,   4],
       [ 33,  44],
       [333, 444]])




#conditional selection
-----------------------
compare the array with a single digit bigger than 5 to grab array of boolean values, these are true and false values, type=bool


arr = np.arange(11)
arr
output:
array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10])

bool_arr = arr > 5
bool_arr
output:
array([False, False, False, False, False, False,  True,  True,  True,
        True,  True])

bool_arr.dtype
output:
dtype('bool')


arr[arr > 5]
or
arr[bool_arr]

output:
array([ 6,  7,  8,  9, 10])

arr_2d = np.arange(50).reshape(5,10)

arr_2d
output:
array([[ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9],
       [10, 11, 12, 13, 14, 15, 16, 17, 18, 19],
       [20, 21, 22, 23, 24, 25, 26, 27, 28, 29],
       [30, 31, 32, 33, 34, 35, 36, 37, 38, 39],
       [40, 41, 42, 43, 44, 45, 46, 47, 48, 49]])





